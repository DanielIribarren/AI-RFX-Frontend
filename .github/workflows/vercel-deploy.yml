name: Vercel Deploy Hook

on:
  # Disparar en push a ramas principales
  push:
    branches:
      - main
      - master
      - develop
      - staging

  # Disparar en pull requests hacia main
  pull_request:
    branches:
      - main
      - master

  # Permitir dispatch manual
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - production

env:
  NODE_VERSION: "18"

jobs:
  # Job para verificar cambios
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for frontend changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'hooks/**'
              - 'types/**'
              - 'contexts/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
              - 'next.config.mjs'
              - 'tailwind.config.ts'
              - 'tsconfig.json'
              - 'vercel.json'

  # Job principal de deploy
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run build test
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'https://api.example.com' }}

      - name: Determine deployment type
        id: deploy-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "type=production" >> $GITHUB_OUTPUT
          else
            echo "type=preview" >> $GITHUB_OUTPUT
          fi

      # Deploy a producci√≥n usando hook
      - name: Deploy to Production
        if: steps.deploy-type.outputs.type == 'production'
        run: |
          echo "üöÄ Disparando deploy hook de producci√≥n..."
          curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_PROD }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "repository": "${{ github.repository }}",
              "pusher": "${{ github.actor }}",
              "workflow": "github-actions"
            }' || exit 1
          echo "‚úÖ Deploy hook de producci√≥n disparado"

      # Deploy a preview usando hook
      - name: Deploy to Preview
        if: steps.deploy-type.outputs.type == 'preview'
        run: |
          echo "üöÄ Disparando deploy hook de preview..."
          curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_PREVIEW }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "repository": "${{ github.repository }}",
              "pusher": "${{ github.actor }}",
              "workflow": "github-actions"
            }' || exit 1
          echo "‚úÖ Deploy hook de preview disparado"

      # Verificar estado del deploy (opcional)
      - name: Check deployment status
        if: env.VERCEL_TOKEN != ''
        run: |
          echo "üîç Verificando estado del deployment..."
          node scripts/check-deploy-status.js
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME || 'my-v0-project' }}
        continue-on-error: true

      # Comentar en PR con informaci√≥n del deploy
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deployType = '${{ steps.deploy-type.outputs.type }}';
            const sha = '${{ github.sha }}';
            const shortSha = sha.substring(0, 7);

            const body = `
            ## üöÄ Deploy Status

            **Type:** ${deployType}  
            **Commit:** \`${shortSha}\`  
            **Branch:** \`${{ github.head_ref }}\`

            El deploy est√° en progreso. Puedes verificar el estado en [Vercel Dashboard](https://vercel.com/dashboard).

            ---
            *Deploy disparado por GitHub Actions*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  # Job de notificaci√≥n
  notify:
    name: Notify Deploy Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deploy completado exitosamente!"
          echo "Rama: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deploy fall√≥!"
          echo "Rama: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          exit 1
